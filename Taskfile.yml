version: '3'

env:
  GOPATH:
    sh: go env GOPATH
  VERSION: 0.1.0
  COMMIT_ID:
    sh: git describe --tags --always # or: git log -n 1 --format=%h
  GOOS:
    sh: go env GOOS
  GOARCH:
    sh: go env GOARCH
  LD_FLAGS_WINDOWS: -H=windowsgui
  LD_FLAGS_EXTRA: '{{if eq OS "windows"}} {{.LD_FLAGS_WINDOWS}} {{else}}    {{end}}'

output: prefixed

tasks:
  go_build:
    env:
      GO111MODULE: on
      CGO_ENABLED: 1
    cmds:
      #- go vet
      - rm -f target/batchai.0*
      - go clean -cache
      - GOOS={{.GOOS}} GOARCH={{.GOARCH}} CGO_ENABLED=0 go build -trimpath -ldflags '-extldflags "-static" -s -w -X main.Version={{.VERSION}} -X main.CommitId={{.COMMIT_ID}} {{.LD_FLAGS_EXTRA}}' -o target/batchai.{{.GOOS}}-{{.GOARCH}}{{.exeExt}} ./cmd/batchai/main.go

  mockgen:
    cmds:
      - task: rm
        vars:
           TARGET: pkg/{{.MOCK_PKG_DEST}}/{{.MOCK_DEST_FILE}}
      - mockgen -destination pkg/{{.MOCK_PKG_DEST}}/{{.MOCK_DEST_FILE}} -package test --build_flags=--mod=mod {{.PROJECT_PKG}}/pkg/{{.MOCK_PKG_SRC}} {{.MOCK_INTERFACE}}
  rm:
    cmds:
      - echo $PATH
      - '{{if eq OS "windows"}} powershell Remove-Item {{.TARGET}} -Force -Recurse {{else}} rm -rf {{.TARGET}} {{end}}'
  cp:
    cmds:
      - '{{if eq OS "windows"}} powershell Copy-Item {{.SRC}} {{.TARGET}} -Recurse {{else}} cp -rf  {{.SRC}} {{.TARGET}} {{end}}'

  init:
    desc: init env, including install dependent tools
    cmds:
      # for linux only
      # apt-get install gcc libgtk-3-dev libayatana-appindicator3-dev
      - go install github.com/golang/mock/mockgen@v1.6.0
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.54.2
      - go install honnef.co/go/tools/cmd/staticcheck@v0.4.6
      - go install mvdan.cc/gofumpt@v0.5.0
      - go install github.com/dmarkham/enumer@v1.5.8
      - go install github.com/nicksnyder/go-i18n/v2/goi18n@v2.2.1
      - go install github.com/rakyll/statik@v0.1.7
      

  mod:
    desc: Downloads and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy
      - go mod vendor

  lint:
    desc: Runs golangci-lint
    sources:
      - './**/*.go'
    cmds:
      - staticcheck ./...
      - golangci-lint run

  gen:
    desc: run statik etc. to embed resource into generated go source files
    cmds:
      - statik -src=./res/static -dest=./res -f -include=* -ns=res
      #- enumer -gqlgen -json -sql -text -yaml -output pkg/plugin/plugin_kind_generated.go -trimprefix PLUGIN_KIND_ -transform whitespace -transform upper -type PluginKind pkg/plugin/plugin.go
      #- task: mockgen
      #  vars:
      #    MOCK_DEST_FILE: controller_mock_test.go
      #    MOCK_PKG_SRC: hosts
      #    MOCK_PKG_DEST: ui
      #    MOCK_INTERFACE: Controller

  clean:
    desc: clean target directory
    cmds:
      - task: rm
        vars:
          TARGET: target

  format:
    cmds:
      - gofumpt -l -w .

  build:
    desc: build for development
    cmds:
      - task: format
      - task: go_build

  darwin:
    desc: release for MacOS
    cmds:
      - task: go_build
        vars:
          GOARCH: amd64
          GOOS: darwin
      - task: go_build
        vars:
          GOARCH: arm64
          GOOS: darwin

  linux:
    desc: release for linux
    cmds:
      - task: go_build
        vars:
          GOARCH: amd64
          GOOS: linux      
      - upx -9 -k -v target/batchai.linux-amd64

  windows:
    desc: release for windows
    cmds:
      - task: go_build
        vars:
          GOARCH: amd64
          GOOS: windows
          exeExt: .exe
      - upx -9 -k -v target/batchai.windows-amd64.exe
      - task: go_build
        vars:
          GOARCH: arm64
          GOOS: windows
          exeExt: .exe

  release:
    cmds:
      - task: clean
      - task: gen
      - task: build
      - task: linux
      - task: windows
      - task: darwin

  run:
    cmds:
      - task: build
      - target/batchai.{{.GOOS}}-{{.GOARCH}}{{exeExt}}

  test:
    desc: run test cases then create coverage report (./coverage.html)
    cmds:
      - go test ./... -covermode=count -coverprofile=coverage.out gcflags=all=-l -timeout 30s
      - go tool cover -html=./coverage.out -o ./coverage.html

  report:
    desc: running goreportcard-cli (not yet working)
    cmds:
      - # gometalinter
      - # #https://github.com/alecthomas/gometalinter/releases/tag/v3.0.0
      - # curl -L https://git.io/vp6lP | sh
      -
      - # brew tap alecthomas/homebrew-tap
      - # brew install gometalinter
      - #
      - # go install github.com/gojp/goreportcard/cmd/goreportcard-cli@latest
      - #goreportcard-cli -v
      - goreportcard-cli

  scc:
    cmds:
      - scc --exclude-dir .git --exclude-dir .task --exclude-dir .vscode --exclude-dir . --exclude-dir target --exclude-dir test --exclude-dir vendor

  all:
    desc: clean, generating, then build
    deps: [clean, gen, test, build]
    cmds:
      - task: clean
      - task: gen
      - task: test
      - task: build
